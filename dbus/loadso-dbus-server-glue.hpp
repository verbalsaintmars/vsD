
/*
 *	This file was automatically generated by dbusxx-xml2cpp; DO NOT EDIT!
 */

#ifndef __dbusxx__loadso_dbus_server_glue_hpp__ADAPTOR_MARSHAL_H
#define __dbusxx__loadso_dbus_server_glue_hpp__ADAPTOR_MARSHAL_H

#include <dbus-c++-1/dbus-c++/dbus.h>
#include <cassert>

namespace vsd {
namespace dbus {
namespace so {

class loadsoul_adaptor
: public ::DBus::InterfaceAdaptor
{
public:

    loadsoul_adaptor()
    : ::DBus::InterfaceAdaptor("vsd.dbus.so.loadsoul")
    {
        register_method(loadsoul_adaptor, Session, _Session_stub);
        register_method(loadsoul_adaptor, Soname, _Soname_stub);
        register_method(loadsoul_adaptor, SonameHash, _SonameHash_stub);
        register_method(loadsoul_adaptor, Version, _Version_stub);
    }

    ::DBus::IntrospectedInterface *introspect() const 
    {
        static ::DBus::IntrospectedArgument Session_args[] = 
        {
            { "a_sessionId", "t", true },
            { "returnStatus", "b", false },
            { 0, 0, 0 }
        };
        static ::DBus::IntrospectedArgument Soname_args[] = 
        {
            { "a_soname", "s", true },
            { "returnStatus", "b", false },
            { 0, 0, 0 }
        };
        static ::DBus::IntrospectedArgument SonameHash_args[] = 
        {
            { "a_hash", "i", true },
            { "returnStatus", "b", false },
            { 0, 0, 0 }
        };
        static ::DBus::IntrospectedArgument Version_args[] = 
        {
            { "a_version", "s", true },
            { "returnStatus", "b", false },
            { 0, 0, 0 }
        };
        static ::DBus::IntrospectedMethod loadsoul_adaptor_methods[] = 
        {
            { "Session", Session_args },
            { "Soname", Soname_args },
            { "SonameHash", SonameHash_args },
            { "Version", Version_args },
            { 0, 0 }
        };
        static ::DBus::IntrospectedMethod loadsoul_adaptor_signals[] = 
        {
            { 0, 0 }
        };
        static ::DBus::IntrospectedProperty loadsoul_adaptor_properties[] = 
        {
            { 0, 0, 0, 0 }
        };
        static ::DBus::IntrospectedInterface loadsoul_adaptor_interface = 
        {
            "vsd.dbus.so.loadsoul",
            loadsoul_adaptor_methods,
            loadsoul_adaptor_signals,
            loadsoul_adaptor_properties
        };
        return &loadsoul_adaptor_interface;
    }

public:

    /* properties exposed by this interface, use
     * property() and property(value) to get and set a particular property
     */

public:

    /* methods exported by this interface,
     * you will have to implement them in your ObjectAdaptor
     */
    virtual bool Session(const uint64_t& a_sessionId) = 0;
    virtual bool Soname(const std::string& a_soname) = 0;
    virtual bool SonameHash(const int32_t& a_hash) = 0;
    virtual bool Version(const std::string& a_version) = 0;

public:

    /* signal emitters for this interface
     */

private:

    /* unmarshalers (to unpack the DBus message before calling the actual interface method)
     */
    ::DBus::Message _Session_stub(const ::DBus::CallMessage &call)
    {
        ::DBus::MessageIter ri = call.reader();

        uint64_t argin1; ri >> argin1;
        bool argout1 = Session(argin1);
        ::DBus::ReturnMessage reply(call);
        ::DBus::MessageIter wi = reply.writer();
        wi << argout1;
        return reply;
    }
    ::DBus::Message _Soname_stub(const ::DBus::CallMessage &call)
    {
        ::DBus::MessageIter ri = call.reader();

        std::string argin1; ri >> argin1;
        bool argout1 = Soname(argin1);
        ::DBus::ReturnMessage reply(call);
        ::DBus::MessageIter wi = reply.writer();
        wi << argout1;
        return reply;
    }
    ::DBus::Message _SonameHash_stub(const ::DBus::CallMessage &call)
    {
        ::DBus::MessageIter ri = call.reader();

        int32_t argin1; ri >> argin1;
        bool argout1 = SonameHash(argin1);
        ::DBus::ReturnMessage reply(call);
        ::DBus::MessageIter wi = reply.writer();
        wi << argout1;
        return reply;
    }
    ::DBus::Message _Version_stub(const ::DBus::CallMessage &call)
    {
        ::DBus::MessageIter ri = call.reader();

        std::string argin1; ri >> argin1;
        bool argout1 = Version(argin1);
        ::DBus::ReturnMessage reply(call);
        ::DBus::MessageIter wi = reply.writer();
        wi << argout1;
        return reply;
    }
};

} } } 
#endif //__dbusxx__loadso_dbus_server_glue_hpp__ADAPTOR_MARSHAL_H
