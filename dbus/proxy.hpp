
/*
 *	This file was automatically generated by dbusxx-xml2cpp; DO NOT EDIT!
 */

#ifndef __dbusxx__proxy_hpp__PROXY_MARSHAL_H
#define __dbusxx__proxy_hpp__PROXY_MARSHAL_H

#include <dbus-c++/dbus.h>
#include <cassert>

namespace org {
namespace apertium {

class Translate_proxy
: public ::DBus::InterfaceProxy
{
public:

    Translate_proxy()
    : ::DBus::InterfaceProxy("org.apertium.Translate")
    {
    }

public:

    /* properties exported by this interface */
public:

    /* methods exported by this interface,
     * this functions will invoke the corresponding methods on the remote objects
     */
    std::string translate(const std::string& pair, const std::map< std::string, std::string >& options, const std::string& text)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << pair;
        wi << options;
        wi << text;
        call.member("translate");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        std::string argout;
        ri >> argout;
        return argout;
    }


public:

    /* signal handlers for this interface
     */

private:

    /* unmarshalers (to unpack the DBus message before calling the actual signal handler)
     */
};

} } 
#endif //__dbusxx__proxy_hpp__PROXY_MARSHAL_H
