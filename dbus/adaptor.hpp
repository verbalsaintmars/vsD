
/*
 *	This file was automatically generated by dbusxx-xml2cpp; DO NOT EDIT!
 */

#ifndef __dbusxx__adaptor_hpp__ADAPTOR_MARSHAL_H
#define __dbusxx__adaptor_hpp__ADAPTOR_MARSHAL_H

#include <dbus-c++/dbus.h>
#include <cassert>

namespace org {
namespace apertium {

class Translate_adaptor
: public ::DBus::InterfaceAdaptor
{
public:

    Translate_adaptor()
    : ::DBus::InterfaceAdaptor("org.apertium.Translate")
    {
        register_method(Translate_adaptor, translate, _translate_stub);
    }

    ::DBus::IntrospectedInterface *introspect() const 
    {
        static ::DBus::IntrospectedArgument translate_args[] = 
        {
            { "pair", "s", true },
            { "options", "a{ss}", true },
            { "text", "s", true },
            { 0, "s", false },
            { 0, 0, 0 }
        };
        static ::DBus::IntrospectedMethod Translate_adaptor_methods[] = 
        {
            { "translate", translate_args },
            { 0, 0 }
        };
        static ::DBus::IntrospectedMethod Translate_adaptor_signals[] = 
        {
            { 0, 0 }
        };
        static ::DBus::IntrospectedProperty Translate_adaptor_properties[] = 
        {
            { 0, 0, 0, 0 }
        };
        static ::DBus::IntrospectedInterface Translate_adaptor_interface = 
        {
            "org.apertium.Translate",
            Translate_adaptor_methods,
            Translate_adaptor_signals,
            Translate_adaptor_properties
        };
        return &Translate_adaptor_interface;
    }

public:

    /* properties exposed by this interface, use
     * property() and property(value) to get and set a particular property
     */

public:

    /* methods exported by this interface,
     * you will have to implement them in your ObjectAdaptor
     */
    virtual std::string translate(const std::string& pair, const std::map< std::string, std::string >& options, const std::string& text) = 0;

public:

    /* signal emitters for this interface
     */

private:

    /* unmarshalers (to unpack the DBus message before calling the actual interface method)
     */
    ::DBus::Message _translate_stub(const ::DBus::CallMessage &call)
    {
        ::DBus::MessageIter ri = call.reader();

        std::string argin1; ri >> argin1;
        std::map< std::string, std::string > argin2; ri >> argin2;
        std::string argin3; ri >> argin3;
        std::string argout1 = translate(argin1, argin2, argin3);
        ::DBus::ReturnMessage reply(call);
        ::DBus::MessageIter wi = reply.writer();
        wi << argout1;
        return reply;
    }
};

} } 
#endif //__dbusxx__adaptor_hpp__ADAPTOR_MARSHAL_H
